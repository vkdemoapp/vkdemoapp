{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","activeView","this","activePanel","id","onClick","setState","header","mode","size","style","display","stretched","marginRight","placeholder","value","left","right","React","Component","Boolean","window","location","hostname","match","bridge","send","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAiEeA,E,kDA3Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,WAAY,SAJG,E,qDAQT,IAAD,OACP,OACE,kBAAC,IAAD,CAAMA,WAAYC,KAAKF,MAAMC,YAC3B,kBAAC,IAAD,CAAME,YAAY,WAAWC,GAAG,SAC9B,kBAAC,IAAD,CAAOA,GAAG,YACR,kBAAC,IAAD,eAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYC,QAAU,kBAAM,EAAKC,SAAS,CAAEL,WAAY,YAAxD,gBAIF,kBAAC,IAAD,CAAOM,OAAQ,kBAAC,IAAD,CAAQC,KAAK,aAAb,+HACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,KAAK,KAAb,eAEF,kBAAC,IAAD,CAAKC,MAAO,CAACC,QAAS,SACpB,kBAAC,IAAD,CAAQF,KAAK,IAAIG,WAAS,EAACF,MAAO,CAAEG,YAAa,IAAjD,aACA,kBAAC,IAAD,CAAQJ,KAAK,IAAIG,WAAS,EAACJ,KAAK,aAAhC,eAGJ,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAQM,YAAY,uEAC9B,4BAAQC,MAAM,KAAd,8CACA,4BAAQA,MAAM,KAAd,kDAKM,kBAAC,IAAD,CAAMR,QAAM,EAACJ,YAAY,WAAWC,GAAG,SACrC,kBAAC,IAAD,CAAOA,GAAG,YACR,kBAAC,IAAD,CACEY,KAAM,kBAAC,IAAD,CAAiBX,QAAU,kBAAM,EAAKC,SAAS,CAAEL,WAAY,aACnEgB,MAAO,kBAAC,IAAD,KAAmB,kBAAC,IAAD,QAF5B,UAMA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYZ,QAAU,kBAAM,EAAKC,SAAS,CAAEL,WAAY,YAAxD,0B,GAhDIiB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCTNC,IAAOC,KAAK,gBAEZC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e07e3168.chunk.js","sourcesContent":["import React from 'react';\nimport { View, Panel, PanelHeader, Root, ConfigProvider, Group, Div,Select, Button, Header, CellButton, PanelHeaderBack, PanelHeaderButton } from '@vkontakte/vkui';\nimport Icon24MoreHorizontal from '@vkontakte/icons/dist/24/more_horizontal';\nimport vkBridge from '@vkontakte/vk-bridge';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeView: 'view1'\n    }\n  }\n\n  render() {\n    return (\n      <Root activeView={this.state.activeView}>\n        <View activePanel=\"panel1.1\" id=\"view1\">\n          <Panel id=\"panel1.1\">\n            <PanelHeader>\n              View 1\n            </PanelHeader>\n            <Group>\n              <CellButton onClick={ () => this.setState({ activeView: 'view2' }) }>\n                Open View 2\n              </CellButton>\n            </Group>\n            <Group header={<Header mode=\"secondary\">Растягивание по ширине</Header>}>\n              <Div>\n                <Button size=\"l\">No stretch</Button>\n              </Div>\n              <Div style={{display: 'flex'}}>\n                <Button size=\"l\" stretched style={{ marginRight: 8 }}>Stretched</Button>\n                <Button size=\"l\" stretched mode=\"secondary\">Stretched</Button>\n              </Div>\n            </Group>\n            <Div>\n            <Select placeholder=\"Выберите пол\">\n  <option value=\"m\">Мужской</option>\n  <option value=\"f\">Женский</option>\n</Select>\n            </Div>\n          </Panel>\n        </View>\n        <View header activePanel=\"panel2.1\" id=\"view2\">\n          <Panel id=\"panel2.1\">\n            <PanelHeader\n              left={<PanelHeaderBack onClick={ () => this.setState({ activeView: 'view1' }) } />}\n              right={<PanelHeaderButton><Icon24MoreHorizontal /></PanelHeaderButton>}\n            >\n              View 2\n            </PanelHeader>\n            <Group>\n              <CellButton onClick={ () => this.setState({ activeView: 'view1' }) }>\n                Back to View 1\n              </CellButton>\n            </Group>\n          </Panel>\n        </View>\n      </Root>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport bridge from \"@vkontakte/vk-bridge\";\nimport '@vkontakte/vkui/dist/vkui.css';\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}